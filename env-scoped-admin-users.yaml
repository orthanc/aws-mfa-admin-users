---
- import_playbook: obtain_session_token.yaml
- hosts: aws_user
  gather_facts: False
  tasks:
    - name: "Environment LimitedAdministrator Group"
      iam_group:
        name: "{{ env_prefix }}-LimitedAdministrator"
        managed_policy: 
          - require_https
          - require_mfa
        purge_policy: True
        purge_users: False
        state: present
        region: "{{ aws_connect_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      run_once: True
    - name: "Environment LimitedAdministrator Scoped Access Policy"
      iam_policy:
        iam_type: group
        iam_name: "{{ env_prefix }}-LimitedAdministrator"
        policy_name: scoped_access
        policy_json: "{{ lookup('template', 'templates/iam_policy/scoped_access.json.j2') }}"
        state: present
        region: "{{ aws_connect_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      run_once: True
    - name: "Ansible User"
      iam:
        iam_type: user
        name: "{{ inventory_hostname }}-{{ env_prefix }}"
        groups:
          - "{{ env_prefix }}-LimitedAdministrator"
        access_key_state: create
        state: present
        region: "{{ aws_connect_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      register: ansible_user_info
      no_log: True
    - name: "env-admin-details/{{ env_prefix }}/{{ username }} dir"
      file:
        state: directory
        path: "{{ playbook_dir }}/env-admin-details/{{ env_prefix }}/{{ inventory_hostname }}"
    - name: "env -admin-details/{{ env_prefix }}/{{ username }}/aws_creds_vars.yaml exists"
      file:
        state: touch
        path: "{{ playbook_dir }}/env-admin-details/{{ env_prefix }}/{{ inventory_hostname }}/aws_creds_vars.yaml"
      register: aws_creds_vars_touch_info
      changed_when: aws_creds_vars_touch_info.diff.before.state == 'absent'
    - name: "Check if AWS Creds Changed"
      set_fact:
        aws_creds_changed: "{{ ansible_user_info.changed and ansible_user_info.user_meta is defined }}"
    - name: "vault.yaml"
      template:
        src: templates/vault.yaml.j2
        dest: "{{ playbook_dir }}/env-admin-details/{{ env_prefix }}/{{ inventory_hostname }}/aws_creds_vault.yaml"
        mode: 0600
      when: aws_creds_changed
    - name: "Load Existing Vars"
      include_vars:
        file: "{{ playbook_dir }}/env-admin-details/{{ env_prefix }}/{{ inventory_hostname }}/aws_creds_vars.yaml"
        name: aws_creds_vars
    - name: "Set User ARN"
      set_fact:
        aws_creds_user_arn: "{{ ansible_user_info.user_meta.created_user.arn if aws_creds_changed else aws_creds_vars.aws_user_arn }}"
    - name: "vars.yaml"
      template:
        src: templates/vars.yaml.j2
        dest: "{{ playbook_dir }}/env-admin-details/{{ env_prefix }}/{{ inventory_hostname }}/aws_creds_vars.yaml"
